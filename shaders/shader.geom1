// Geometry shader
const GLchar* geometryShaderSrc2 = GLSL(
    layout(points) in;
    layout(line_strip, max_vertices = 420) out;


    uniform mat4 view;
    uniform mat4 projection;
    uniform mat4 model;
    uniform vec3 cameraPos;

    in vec3 vSize[];
    in int vType[];
    in float vTime[];
    in int vSides[];
    //in vec4 color[];

    out vec4 gColor;
    vec4 aux = projection * view * model * gl_in[0].gl_Position;
    const float PI = 3.1415926;


    void makeCyl(float width, float l,float h, int sides){
        float initAngle = (PI / 4);
                // Safe, GLfloats can represent small integers exactly
                for (int i = 0; i <= sides; i++) {
                    // Angle between each side in radians
                    float ang = ((PI * 2.0) / sides * i) + initAngle;
                    //float ang = (PI * 2.0) / vSides[0] * i;
                    //ang -= vTime[0];
                    //if(i%2==0)
                    //    gl_Position = aux * projection * view * model;
                    //    EmitVertex();

                    gColor = vec4(ang/15,ang/15,ang/15,1.0);

                    // Offset from center of point (0.3 to accomodate for aspect ratio)
                    vec4 offset = projection * view * model * vec4(cos(ang) * width, -sin(ang) * l, -h, 0.0);
                    gl_Position = aux + offset;
                    EmitVertex();

                    offset = projection * view * model * vec4(cos(ang) * width, -sin(ang) * l, h, 0.0);
                    gl_Position = aux + offset;
                    EmitVertex();


                }
                EndPrimitive();

                // Safe, GLfloats can represent small integers exactly
                for (int i = 0; i <= sides; i++) {
                    // Angle between each side in radians
                    float ang = ((PI * 2.0) / sides * i) + initAngle;
                    if(i%2==(sides%2))
                        gl_Position = aux + projection * view * model * vec4(0.0f,0.0f,-h,0.0f);
                        EmitVertex();

                    gColor = vec4(ang/7,ang/7,ang/7,1.0);
                    // Offset from center of point (0.3 to accomodate for aspect ratio)
                    vec4 offset = projection * view * model * vec4(cos(ang) * width, -sin(ang) * l, -h, 0.0);
                    gl_Position = aux + offset;
                    EmitVertex();

                }
                EndPrimitive();
                // Safe, GLfloats can represent small integers exactly
                for (int i = 0; i <= sides; i++) {
                    // Angle between each side in radians
                    float ang = ((PI * 2.0) / sides * i) + initAngle;
                    if(i%2==(sides%2))
                        gl_Position = aux + projection * view * model * vec4(0.0f,0.0f,h,0.0f);
                        EmitVertex();

                    gColor = vec4(ang/12,ang/12,ang/12,1.0);
                    // Offset from center of point (0.3 to accomodate for aspect ratio)
                    vec4 offset = projection * view * model * vec4(cos(ang) * width, -sin(ang) * l, h, 0.0);
                    gl_Position = aux + offset;
                    EmitVertex();

                }
                EndPrimitive();
    }

    void makeSphere(float size, int sides){
        // Safe, GLfloats can represent small integers exactly
        for (int i = 0; i <= sides; i++) {
            float ang = (PI * 2.0) / sides * i;
            float ang1 = (PI * 2.0) / sides * (i+1);
            // Angle between each side in radians
            for (int j = 0; j <= sides; j++)
            {
            float ang2 = (PI * 2.0) / sides * j;
            float ang3 = (PI * 2.0) / sides * (j+1);
            gColor = vec4(0.1,ang/10,0.1,1.0);

            // Offset from center of point (0.3 to accomodate for aspect ratio)
            vec4 offset = projection * view * model * vec4(sin(ang)*cos(ang2) * 0.1, sin(ang)*sin(ang2) * 0.1, cos(ang) * 0.1, 0.0);
            gl_Position = aux + offset;
            EmitVertex();
            offset = projection * view * model * vec4(sin(ang1)*cos(ang2) * 0.1, sin(ang1)*sin(ang2) * 0.1, cos(ang1) * 0.1, 0.0);
            gl_Position = aux + offset;
            EmitVertex();

            }
            EndPrimitive();
        }
        EndPrimitive();

    }

    int calcSides(int sides){
        float dist = distance(aux,vec4(cameraPos,1.0));
        if(dist > 1){
             return  int(min(32,max(4.0,sides/(dist*0.1))));
        }
        return sides;

    }

    bool notVisible(){
        return aux.x < -200.0 || aux.x > 200.0 || aux.y < -10.0 || aux.y > 1000.0;// || aux.z < -1.0 || aux.z > 10.0;
    }

    void main() {

        if(notVisible()){
//            EndPrimitive();
        }
        else{
            gColor = vec4(0.1,0.67,0.3,1.0);
            switch (vType[0]){

                case 1:
                    makeCyl(vSize[0].x,vSize[0].y,vSize[0].z,4);
                break;

                case 2:
                    makeSphere(vSize[0].x,16);
                break;

                case 3:
                    makeCyl(vSize[0].x,vSize[0].y,vSize[0].z,calcSides(int(vSides[0])));
                break;

                default:
                    gl_Position = aux + projection * view * model * vec4(0.1, -0.1, 0.0, 0.0);
                    EmitVertex();

                    gl_Position = aux + projection * view * model * vec4(-0.1, -0.1, 0.0, 0.0);
                    EmitVertex();

                    gl_Position = aux + projection * view * model * vec4(-0.1, 0.1, 0.0, 0.0);
                    EmitVertex();
                    EndPrimitive();
            }
        }

    }
);