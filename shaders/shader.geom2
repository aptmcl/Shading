// Geometry shader
const GLchar* geometryShaderSrc2 = GLSL(
    layout(points) in;
    layout(line_strip, max_vertices = 255) out;

    //uniform mat4 view;
    //uniform mat4 projection;
    //uniform mat4 model;
    uniform vec3 cameraPos;
    uniform vec3 lookat;
	uniform mat4 MVP;

    in int vSides[];
	in float vScale[];
    in int vType[];
    in mat4 vMat[];
	in float vRatio[];

    out vec4 gColor;
    out vec2 vTex;
    const float PI = 3.1415926;
    mat4 tMat = vMat[0];
	
    //mat4 vMat[0] = calcRotation();
    vec4 aux = MVP * tMat * gl_in[0].gl_Position;

    float rand(vec2 co){
        return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
    }

    int calcSides(int sides){
        float dist = distance(aux,vec4(cameraPos,1.0));
        if(dist > vScale[0]*2){
             return  int(min(sides,max(4.0,(vScale[0]/dist)*(vSides[0]*30.0))));
        }
        return sides;
    }

    //float topColor = rand((tMat * gl_in[0].gl_Position).xy)*0.5+0.25;

    void makeRegSurface(float width, float l, int sides){

        // Safe, GLfloats can represent small integers exactly
        for (int i = 0; i <= sides; i++) {
            // Angle between each side in radians
            float ang = ((PI * 2.0) / sides * i) + vRatio[0];
           
            // Offset from center of point (0.3 to accomodate for aspect ratio)
            gl_Position = aux + MVP * tMat *  vec4(cos(ang) * width, -sin(ang) * l, 0.0, 1.0);
            vTex = vec2(i/sides,1.0);
            EmitVertex();
        }
        EndPrimitive();

    }

	void makeLine(int n){
		for(int i = 0;i<n;i++){
			gl_Position = MVP * vec4(tMat[i][0],tMat[i][1],tMat[i][2],1.0);
			EmitVertex();
		}
		EndPrimitive();
	
	}





    bool notVisible(){

        vec4 rx = aux + MVP * tMat * vec4(1.0, 0.0, 0.0, 1.0);
        vec4 lx = aux + MVP * tMat * vec4(-1.0, 0.0, 0.0, 1.0);
        vec4 fy = aux + MVP * tMat * vec4(0.0, 1.0, 0.0, 1.0);
        vec4 by = aux + MVP * tMat * vec4(0.0, -1.0, 0.0, 1.0);
        vec4 uz = aux + MVP * tMat * vec4(0.0, 0.0, 1.0, 1.0);
        vec4 dz = aux + MVP * tMat * vec4(0.0, 0.0, -1.0, 1.0);

        // aux.x/aux.w>1 to check if the object is visible. changed to aux.x>aux.w to be faster by avoiding one division.
        //return aux.x>aux.w && aux.x<-aux.w && aux.y>aux.w && aux.y<-aux.w && aux.z>aux.w && aux.z<0 ;

        // each varieble is the point by the side of the current object's bounding box. r = right l = left


        return rx.x>rx.w && lx.x<-lx.w && dz.y>dz.w && uz.y<-uz.w && fy.z>fy.w && by.z<0;
    }

    mat4 cleanColor(mat4 mat){

        mat4 ret = mat;

        gColor = vec4(mat[0][3],mat[1][3],mat[2][3],1.0);

        ret[0][3]=0.0;
        ret[1][3]=0.0;
        ret[2][3]=0.0;

        return ret;
    }

    void main() {
       // calcRotation();
        tMat = cleanColor(vMat[0]);
        //tMat = vMat[0];
        if(notVisible()){
//            EndPrimitive();
            return;
        }

        //gColor = vec4(0.1,0.67,0.3,1.0);
        switch (vType[0]){
            case 11:
                makeRegSurface(1.0,1.0,int(vSides[0]));
            break;
			case 13:
				makeLine(int(vSides[0]));

			default:
			break;
        }
        

    }
);
